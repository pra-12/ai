import heapq

def astar(graph, start, goal):
    open_list = [(0, start)]
    came_from = {}
    g_score = {node: float('inf') for node in graph}
    g_score[start] = 0
    
    while open_list:
        current_cost, current_node = heapq.heappop(open_list)
        
        if current_node == goal:
            path = []
            while current_node in came_from:
                path.append(current_node)
                current_node = came_from[current_node]
            path.append(start)
            return list(reversed(path))
        
        for neighbor, cost in graph[current_node].items():
            tentative_g_score = g_score[current_node] + cost
            
            if tentative_g_score < g_score[neighbor]:
                came_from[neighbor] = current_node
                g_score[neighbor] = tentative_g_score
                f_score = tentative_g_score + heuristic(neighbor, goal)
                heapq.heappush(open_list, (f_score, neighbor))
    
    return None

def heuristic(node, goal):
    # Simple heuristic: Cost from current node to goal node
    return 0  # In this example, the heuristic is 0, making A* equivalent to Dijkstra's algorithm

def get_user_input():
    graph = {}
    num_edges = int(input("Enter the number of edges: "))

    for _ in range(num_edges):
        source, dest, cost = input("Enter edge (source dest cost): ").split()
        cost = int(cost)

        if source not in graph:
            graph[source] = {}
        graph[source][dest] = cost

    start_node = input("Enter the start node: ")
    goal_node = input("Enter the goal node: ")

    return graph, start_node, goal_node

if __name__ == "__main__":
    user_graph, user_start, user_goal = get_user_input()

    path = astar(user_graph, user_start, user_goal)

    if path:
        print("Shortest path:", path)
    else:
        print("No path found")
'''# Example Input:
Enter the number of edges: 8
Enter edge (source dest cost): A B 1
Enter edge (source dest cost): A D 3
Enter edge (source dest cost): B A 1
Enter edge (source dest cost): B D 4
Enter edge (source dest cost): B E 2
Enter edge (source dest cost): C E 5
Enter edge (source dest cost): D A 3
Enter edge (source dest cost): D B 4
Enter the start node: A
Enter the goal node: C '''
